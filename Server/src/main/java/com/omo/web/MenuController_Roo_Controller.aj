// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.omo.web;

import com.omo.domain.Menu;
import com.omo.repository.MenuItemRepository;
import com.omo.repository.RestaurantRepository;
import com.omo.service.MenuService;
import com.omo.web.MenuController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MenuController_Roo_Controller {
    
    @Autowired
    MenuService MenuController.menuService;
    
    @Autowired
    MenuItemRepository MenuController.menuItemRepository;
    
    @Autowired
    RestaurantRepository MenuController.restaurantRepository;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MenuController.create(@Valid Menu menu, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, menu);
            return "menus/create";
        }
        uiModel.asMap().clear();
        menuService.saveMenu(menu);
        return "redirect:/menus/" + encodeUrlPathSegment(menu.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MenuController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Menu());
        return "menus/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MenuController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("menu", menuService.findMenu(id));
        uiModel.addAttribute("itemId", id);
        return "menus/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MenuController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("menus", menuService.findMenuEntries(firstResult, sizeNo));
            float nrOfPages = (float) menuService.countAllMenus() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("menus", menuService.findAllMenus());
        }
        return "menus/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MenuController.update(@Valid Menu menu, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, menu);
            return "menus/update";
        }
        uiModel.asMap().clear();
        menuService.updateMenu(menu);
        return "redirect:/menus/" + encodeUrlPathSegment(menu.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MenuController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, menuService.findMenu(id));
        return "menus/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String MenuController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Menu menu = menuService.findMenu(id);
        menuService.deleteMenu(menu);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/menus";
    }
    
    void MenuController.populateEditForm(Model uiModel, Menu menu) {
        uiModel.addAttribute("menu", menu);
        uiModel.addAttribute("menuitems", menuItemRepository.findAll());
        uiModel.addAttribute("restaurants", restaurantRepository.findAll());
    }
    
    String MenuController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
